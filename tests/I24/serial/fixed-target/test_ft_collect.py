from unittest.mock import mock_open, patch

import pytest

from mx_bluesky.I24.serial.fixed_target.i24ssx_Chip_Collect_py3v1 import (
    datasetsizei24,
    get_chip_prog_values,
    get_prog_num,
    start_i24,
)
from mx_bluesky.I24.serial.parameters.experiment_parameters import ExperimentParameters

params = {
    "general": {
        "visit": "/foo/",
        "directory": "bar",
        "filename": "chip",
        "exp_time": 0.05,
        "det_type": "eiger",
        "det_dist": 100,
    },
    "pump_probe": {
        "pump_exp": 0.01,
        "pump_delay": 0.02,
    },
    "expt": {
        "chip_type": "0",
        "map_type": "1",
        "n_exposures": 2,
    },
}

chipmap_str = """01status    P3011       1
02status    P3021       0
03status    P3031       0
04status    P3041       0"""


@patch("mx_bluesky.I24.serial.fixed_target.i24ssx_Chip_Collect_py3v1.caput")
@patch("mx_bluesky.I24.serial.fixed_target.i24ssx_Chip_Collect_py3v1.caget")
def test_datasetsizei24_for_one_block_and_two_exposures(fake_caget, fake_caput):
    fake_params = ExperimentParameters(**params)
    fake_caget.return_value = 2
    with patch(
        "mx_bluesky.I24.serial.fixed_target.i24ssx_Chip_Collect_py3v1.open",
        mock_open(read_data=chipmap_str),
    ):
        tot_num_imgs = datasetsizei24(fake_params)
    assert tot_num_imgs == 800


def test_get_chip_prog_values():
    chip_dict = get_chip_prog_values(
        "0",
        "0",
        0,
        0,
        0,
        n_exposures=2,
    )
    assert type(chip_dict) is dict
    assert chip_dict["X_NUM_STEPS"][1] == 20 and chip_dict["X_NUM_BLOCKS"][1] == 8
    assert chip_dict["PUMP_REPEAT"][1] == 0
    assert chip_dict["N_EXPOSURES"][1] == 2


@pytest.mark.parametrize(
    "chip_type, map_type, pump_repeat, expected_prog",
    [
        ("0", "0", "0", 11),  # Oxford chip, full chip, no pump
        ("0", "1", "0", 12),  # Oxford chip, map generated by mapping lite, no pump
        ("2", "", "0", 11),  # Custom chip, map type not needed(full assumed), no pump
        ("0", "", "2", 14),  # Oxford chip, assumes mapping lite, pump 2
        ("3", "", "0", 11),  # Minichip, no map type, no pump probe
    ],
)
def test_get_prog_number(chip_type, map_type, pump_repeat, expected_prog):
    assert get_prog_num(chip_type, map_type, pump_repeat) == expected_prog


@patch("mx_bluesky.I24.serial.fixed_target.i24ssx_Chip_Collect_py3v1.datasetsizei24")
@patch("mx_bluesky.I24.serial.fixed_target.i24ssx_Chip_Collect_py3v1.DCID")
@patch("mx_bluesky.I24.serial.fixed_target.i24ssx_Chip_Collect_py3v1.caput")
@patch("mx_bluesky.I24.serial.fixed_target.i24ssx_Chip_Collect_py3v1.caget")
@patch("mx_bluesky.I24.serial.fixed_target.i24ssx_Chip_Collect_py3v1.sup")
def test_start_i24_with_eiger(fake_sup, fake_caget, fake_caput, fake_dcid, fake_size):
    fake_size.return_value = 800
    fake_params = ExperimentParameters(**params)
    start_i24(fake_params, fake_params.general.collection_path)
    assert fake_sup.beamline.call_count == 2
    assert fake_sup.eiger.call_count == 1
    # Pilatus gets called for hack to create directory
    assert fake_sup.pilatus.call_count == 2
    assert fake_dcid.call_count == 1
